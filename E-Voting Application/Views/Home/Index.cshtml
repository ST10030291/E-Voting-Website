@{
    ViewData["Title"] = "Home Page";
}

<head>
	<link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
</head>
<!-- Countdown -->
<h2 id="wlcMsg"></h2>
<p id="demo"></p>

<!-- Banner -->
<div class="image-placeholder">
	<img src="~/Images/sa_flag_fist.jpg" alt="Election Banner" class="full-width-image">
</div>

<!-- Home Page card -->
<div class="header-container">
	<div class="card-title">
		<h2 id="nationalHeader">Current top 3 parties nationally</h2>
	</div>
</div>

<!-- National Parties TOP 3 Section -->
<div class="card-container">
	<div class="floating-card">
		<div class="card-content">
			<div class="party-ranking">
				<!-- Top Party 1 -->
				<div class="party">
					<div class="position">1</div>
					<img src="~/Images/user_icon.png" alt="Party 1 Logo" class="party-logo" id="partyLogo1">
					<div class="party-info">
						<div class="party-name" id="partyName1">Party 1</div>
						<div class="party-leader" id="partyLeader1">Leader: Unknown</div>
					</div>
					<img src="~/Images/user_icon.png" alt="Leader 1" class="leader-image" id="partyLeaderImage1">
					<div class="vote-count" id="partyNationalVotes1">Votes: 0</div>
				</div>

				<!-- Top Party 2 -->
				<div class="party">
					<div class="position">2</div>
					<img src="~/Images/user_icon.png" alt="Party 2 Logo" class="party-logo" id="partyLogo2">
					<div class="party-info">
						<div class="party-name" id="partyName2">Party 2</div>
						<div class="party-leader" id="partyLeader2">Leader: Unknown</div>
					</div>
					<img src="~/Images/user_icon.png" alt="Leader 2" class="leader-image" id="partyLeaderImage2">
					<div class="vote-count" id="partyNationalVotes2">Votes: 0</div>
				</div>

				<!-- Top Party 3 -->
				<div class="party">
					<div class="position">3</div>
					<img src="~/Images/user_icon.png" alt="Party 3 Logo" class="party-logo" id="partyLogo3">
					<div class="party-info">
						<div class="party-name" id="partyName3">Party 3</div>
						<div class="party-leader" id="partyLeader3">Leader: Unknown</div>
					</div>
					<img src="~/Images/user_icon.png" alt="Leader 3" class="leader-image" id="partyLeaderImage3">
					<div class="vote-count" id="partyNationalVotes3">Votes: 0</div>
				</div>
			</div>
		</div>
	</div>
</div>

<!-- Statistics --> 

<div id="chartsContainer" style="display: flex; justify-content: space-around; gap: 20px;">
	<div id="piechart"></div>
	<div id="linechart" style="width: 550px; height: 400px; margin-top: 20px;"></div>
</div>

<div id="barchart" style="width: 550px; height: 400px;"></div>

<div class="container" id="con1">
	<!-- National Party Rankings -->
	<div class="card-title">
		<h2 id="nationalHeader">National Party Rankings - All</h2>
	</div>
	<!-- Ranking parties nationally -->
	<table id="partyTable1" class="party-table">
		<thead>
			<tr>
				<th>Position</th>
				<th>Party Name</th>
				<th>Party Logo</th>
				<th>Leader Name</th>
				<th>Leader Image</th>
				<th>Votes</th>
			</tr>
		</thead>
		<tbody>
			<!-- Rows will be populated dynamicaly -->
		</tbody>
	</table>

	<!-- Provincial Party Rankings -->
	<div class="card-title">
		<h2 id="provincialHeader">Provincial Party Rankings</h2>
	</div>

	<!-- Province Filter -->
	<div class="province-filter">
		<label for="provinceSelect">Filter by Province:</label>
		<select id="provinceSelect">
			<option value="Eastern Cape">Eastern Cape</option>
			<option value="Free State">Free State</option>
			<option value="Gauteng">Gauteng</option>
			<option value="KwaZulu-Natal">KwaZulu-Natal</option>
			<option value="Limpopo">Limpopo</option>
			<option value="Mpumalanga">Mpumalanga</option>
			<option value="North West">North West</option>
			<option value="Northern Cape">Northern Cape</option>
			<option value="Western Cape" selected>Western Cape</option>
		</select>
	</div>

	<!-- Provincial Party Rankings Table -->
	<table id="partyTable2" class="party-table">
		<thead>
			<tr>
				<th>Position</th>
				<th>Party Name</th>
				<th>Party Logo</th>
				<th>Leader Name</th>
				<th>Leader Image</th>
				<th>Votes</th>
			</tr>
		</thead>
		<tbody>
			<!-- Rows will be populated dynamically -->
		</tbody>
	</table>
</div>

<h2 id="nationalHeader">Latest News - IEC Elections</h2>

<!-- Slideshow latest news-->
<div class="slideshow-container2">

	<div class="mySlides2 fade2">
		<img src="~/Images/news_slide1.png" alt="Slide 1" style="width:100%">
	</div>

	<div class="mySlides2 fade2">
		<img src="~/Images/news_slide2.jpg" alt="Slide 2" style="width:100%">
	</div>

	<div class="mySlides2 fade2">
		<img src="~/Images/election_results.jpg" alt="Slide 3" style="width:100%">
	</div>

	<a class="prev2" onclick="plusSlides2(-1)">&#10094;</a>
	<a class="next2" onclick="plusSlides2(1)">&#10095;</a>
</div>

<div style="text-align:center">
	<span class="dot2" onclick="currentSlide2(1)"></span>
	<span class="dot2" onclick="currentSlide2(2)"></span>
	<span class="dot2" onclick="currentSlide2(3)"></span>
</div>

<!-- Social Media Section-->
<section class="testimonials section">
	<div class="testimonials-shape testimonials-shape-1">
		<svg width="280" height="280" viewBox="0 0 280 280" xmlns="http://www.w3.org/2000/svg">
			<defs>
				<linearGradient x1="100%" y1="0%" x2="0%" y2="100%" id="testimonials-shape-1">
					<stop stop-color="#261FB6" offset="0%" />
					<stop stop-color="#4950F6" offset="100%" />
				</linearGradient>
			</defs>
			<circle cx="140" cy="685" r="140" transform="translate(0 -545)" fill="url(#testimonials-shape-1)" fill-rule="evenodd" />
		</svg>
	</div>
	<div class="testimonials-shape testimonials-shape-2">
		<svg width="125" height="107" viewBox="0 0 125 107" xmlns="http://www.w3.org/2000/svg">
			<g fill="none" fill-rule="evenodd">
				<circle fill="#C6FDF3" cx="48" cy="59" r="48" />
				<path d="M58.536 39.713c0-6.884 1.72-14.007 5.163-21.368 3.443-7.36 8.167-13.458 14.173-18.292l11.645 7.91c-3.589 4.98-6.262 10.016-8.02 15.106S78.86 33.598 78.86 39.384v13.623H58.536V39.713z" fill="#55EBD0" />
				<path d="M93.252 39.713c0-6.884 1.722-14.007 5.164-21.368 3.442-7.36 8.166-13.458 14.172-18.292l11.646 7.91c-3.589 4.98-6.262 10.016-8.02 15.106s-2.637 10.529-2.637 16.315v13.623H93.252V39.713z" fill="#1ADAB7" />
			</g>
		</svg>
	</div>
	<div class="testimonials-shape testimonials-shape-3">
		<svg width="48" height="48" viewBox="0 0 48 48" mlns="http://www.w3.org/2000/svg">
			<defs>
				<linearGradient x1="93.05%" y1="19.767%" x2="15.034%" y2="85.765%" id="testimonials-shape-3">
					<stop stop-color="#FF3058" offset="0%" />
					<stop stop-color="#FF6381" offset="100%" />
				</linearGradient>
			</defs>
			<circle cx="24" cy="434" r="24" transform="translate(0 -410)" fill="url(#testimonials-shape-3)" fill-rule="evenodd" />
		</svg>
	</div>
	<div class="container">
		<div class="testimonials-inner section-inner">
			<div class="typing-loader">
				<h1 id="typing-text" class="typing-text"></h1>
			</div>
			<h2 class="section-title mt-0 text-center"></h2>
			<div class="testimonials-wrap">
				<div class="testimonial text-xs is-revealing">
					<div class="testimonial-inner">
						<div class="testimonial-main">
							<div class="testimonial-header">
								<img class="mb-16" src="~/Images/twitter_logo.png" alt="Testimonial">
							</div>
							<div class="testimonial-body">
								<p class="mb-0">The first batch of results are in! Exciting times as South Africa heads toward another pivotal election day. Stay tuned for real-time updates! #SAElections2024 #IEC</p>
							</div>
						</div>
						<div class="testimonial-footer">
							<div class="testimonial-link">
								<a href="#">&#64;martajones</a>
							</div>
						</div>
					</div>
				</div>
				<div class="testimonial text-xs is-revealing">
					<div class="testimonial-inner">
						<div class="testimonial-main">
							<div class="testimonial-header">
								<img class="mb-16" src="~/Images/facebook_logo.jpg" alt="Testimonial">
							</div>
							<div class="testimonial-body">
								<p class="mb-0">Voter lines are getting longer as more South Africans head to the polls. The energy is palpable in the major cities – will this be a game-changing election? #IEC #VoterTurnout</p>
							</div>
						</div>
						<div class="testimonial-footer">
							<div class="testimonial-link">
								<a href="#">&#64;michealpahm</a>
							</div>
						</div>
					</div>
				</div>
				<div class="testimonial text-xs is-revealing">
					<div class="testimonial-inner">
						<div class="testimonial-main">
							<div class="testimonial-header">
								<img class="mb-16" src="~/Images/instagram_logo.png" alt="Testimonial">
							</div>
							<div class="testimonial-body">
								<p class="mb-0">Reports are coming in about delays in some polling stations. Hopefully, all issues will be resolved soon. Let’s make sure every vote counts! #ElectionDay2024 #SAElections #IEC</p>
							</div>
						</div>
						<div class="testimonial-footer">
							<div class="testimonial-link">
								<a href="#">&#64;markbrown</a>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<div class="social-media-container">
	<h3 class="section-title mt-0 text-center">IEC Social Media Links</h3>
	<div class="social-media-tray">
		<a href="https://www.facebook.com/IECSouthAfrica" target="_blank" class="fa fa-facebook"></a>
		<a href="https://twitter.com/IECSouthAfrica" target="_blank" class="fa fa-twitter"></a>
		<a href="https://www.instagram.com/iecsouthafrica/" target="_blank" class="fa fa-instagram"></a>
		<a href="https://www.youtube.com/user/IECSouthAfrica" target="_blank" class="fa fa-youtube"></a>
	</div>
</div>

<script type="module">
	import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
	import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
	import { getFirestore, collection, getDocs, query, where } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";
	import { getDatabase, ref as dbRef, get } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-database.js";
	import { getStorage, ref, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";

	// Firebase Configuration
	const firebaseConfig = {
		apiKey: "AIzaSyC01tpLg7LvB7yfTHtkB2-jfb9z-_2dA20",
		authDomain: "e-voting-application-b782e.firebaseapp.com",
		databaseURL: "https://e-voting-application-b782e-default-rtdb.firebaseio.com",
		projectId: "e-voting-application-b782e",
		storageBucket: "e-voting-application-b782e.firebasestorage.app",
		messagingSenderId: "942000114372",
		appId: "1:942000114372:web:0c5ab2571efada94515791",
		measurementId: "G-YHRLF496SD"
	};

	// Initialize Firebase
	const app = initializeApp(firebaseConfig);
	const db = getFirestore(app);
	const rtdb = getDatabase(app);
	const auth = getAuth(app);
	const storage = getStorage(app);

	// Code for top 3 national rankings
	async function displayTopNationalParties() {
		const partiesSnapshot = await getDocs(collection(db, 'parties'));
		const parties = [];

		partiesSnapshot.forEach((doc) => {
			const partyData = doc.data();
			parties.push({
				Id: doc.id,
				PartyName: partyData.PartyName,
				PartyLeader: partyData.PartyLeader,
				NationalVoteCount: partyData.NationalVoteCount,
				PartyImageUrl: partyData.PartyImageUrl,
				LeaderImageUrl: partyData.LeaderImageUrl
			});
		});

		// Sort parties by NationalVoteCount in descending order
		parties.sort((a, b) => b.NationalVoteCount - a.NationalVoteCount);

		// Display top 3 parties
		for (let i = 0; i < 3; i++) {
			if (parties[i]) {
				const party = parties[i];

				const partyLogo = document.getElementById(`partyLogo${i + 1}`);
				const partyName = document.getElementById(`partyName${i + 1}`);
				const partyLeader = document.getElementById(`partyLeader${i + 1}`);
				const leaderImage = document.getElementById(`partyLeaderImage${i + 1}`);
				const voteCount = document.getElementById(`partyNationalVotes${i + 1}`);

				try {
					partyLogo.src = await getDownloadURL(ref(storage, party.PartyImageUrl));
					partyName.textContent = party.PartyName;
					partyLeader.textContent = `Leader: ${party.PartyLeader}`;
					leaderImage.src = await getDownloadURL(ref(storage, party.LeaderImageUrl));
					voteCount.textContent = `Votes: ${party.NationalVoteCount.toLocaleString()}`;
				} catch (error) {
					console.error("Error loading party images:", error);
					// image in case of an error
					partyLogo.src = "~/Images/default_party_logo.png";
					leaderImage.src = "~/Images/default_leader_image.png";
				}
			}
		}
	}

	displayTopNationalParties();
	// code for top 3 national END

	// Code for national ranking All natonal/provincial
	// National 
	const partyQuery = query(
		collection(db, 'parties'),
		where('JurisdictionLevel', 'in', ['National', 'Both']) 
	);

	getDocs(partyQuery)
		.then(querySnapshot => {
			let nationalParties = [];

			querySnapshot.forEach(doc => {
				nationalParties.push(doc.data());
			});

			nationalParties.sort((a, b) => b.NationalVoteCount - a.NationalVoteCount);

			// Populate the national rankings table
			const nationalTable = document.getElementById('partyTable1').getElementsByTagName('tbody')[0];
			nationalTable.innerHTML = ''; 

			nationalParties.forEach((party, index) => {
				const row = nationalTable.insertRow();
				row.innerHTML = `
			<td>${index + 1}</td>
			<td>${party.PartyName}</td>
			<td><img src="${party.PartyImageUrl}" alt="Party Logo" class="party-logo"></td>
			<td>${party.PartyLeader}</td>
			<td><img src="${party.LeaderImageUrl}" alt="Leader Image" class="leader-image"></td>
			<td>${party.NationalVoteCount}</td>
		  `;
			});
		})
		.catch(error => {
			console.error("Error getting party data: ", error);
		});

		// Provincial
	const provinceSelect = document.getElementById("provinceSelect");
	const partyTable2 = document.getElementById('partyTable2').getElementsByTagName('tbody')[0];

	// Function to fetch and display provincial rankings
	// This was definetly the hardest method to do looool
	const fetchProvincialRankings = (selectedProvince) => {

		const voteQuery = query(
			collection(db, 'votes'),
			where('Province', '==', selectedProvince)
		);

		getDocs(voteQuery)
			.then(querySnapshot => {
				let voteCounts = {};

				const partyQuery = query(
					collection(db, 'parties'),
					where('JurisdictionLevel', 'in', ['Provincial', 'Both'])
				);

				getDocs(partyQuery)
					.then(partySnapshot => {
						let parties = [];

						partySnapshot.forEach(doc => {
							const partyData = doc.data();
							parties.push({
								...partyData,
								VoteCount: 0  
							});
						});

						querySnapshot.forEach(doc => {
							const voteData = doc.data();
							const provincialPartyId = voteData.ProvincialPartyId;

							// Find party 
							const party = parties.find(p => p.PartyName === provincialPartyId);

							// If a matching party is found > increment its vote count
							if (party) {
								party.VoteCount++;
							}
						});

						parties.sort((a, b) => b.VoteCount - a.VoteCount);

						partyTable2.innerHTML = '';

						parties.forEach((party, index) => {
							const row = partyTable2.insertRow();
							row.innerHTML = `
				  <td>${index + 1}</td>
				  <td>${party.PartyName}</td>
				  <td><img src="${party.PartyImageUrl}" alt="Party Logo" class="party-logo"></td>
				  <td>${party.PartyLeader}</td>
				  <td><img src="${party.LeaderImageUrl}" alt="Leader Image" class="leader-image"></td>
				  <td>${party.VoteCount}</td>
				`;
						});
					})
					.catch(error => {
						console.error("Error fetching party data: ", error);
					});
			})
			.catch(error => {
				console.error("Error fetching votes: ", error);
			});
	};

	//province filter 
	provinceSelect.addEventListener("change", (event) => {
		const selectedProvince = event.target.value;
		fetchProvincialRankings(selectedProvince);
	});

	// default 
	fetchProvincialRankings("Western Cape");
	// Code for national ranking All - End 

	// Pie Chart 
	async function displayPieChart() {
		const partyQuery = query(
			collection(db, 'parties'),
			where('JurisdictionLevel', 'in', ['National', 'Both'])
		);

		const querySnapshot = await getDocs(partyQuery);
		let parties = [];
		let totalVotes = 0;

		querySnapshot.forEach(doc => {
			const partyData = doc.data();
			parties.push({
				name: partyData.PartyName,
				votes: partyData.NationalVoteCount
			});
			totalVotes += partyData.NationalVoteCount;
		});

		const chartData = [['Party', 'Percentage']];
		parties.forEach(party => {
			const percentage = (party.votes / totalVotes) * 100;
			chartData.push([party.name, percentage]);
		});

		// Load and draw the pie chart
		google.charts.load('current', { packages: ['corechart'] });
		google.charts.setOnLoadCallback(() => {
			const data = google.visualization.arrayToDataTable(chartData);
			const options = {
				title: 'National Party Voting Percentages',
				width: 550,
				height: 400,
				is3D: true,
				pieSliceText: 'percentage',
				fontSize: 20,
				legend: { position: 'bottom' },
			};

			const chart = new google.visualization.PieChart(document.getElementById('piechart'));
			chart.draw(data, options);
		});
	}

	displayPieChart();

	// Graphs
	async function displayCharts() {
		// (Top 3 Parties and Projection)
		const partySnapshot = await getDocs(collection(db, 'parties'));
		let parties = [];
		partySnapshot.forEach(doc => {
			const partyData = doc.data();
			parties.push({
				name: partyData.PartyName,
				votes: partyData.NationalVoteCount
			});
		});

		// Sort parties by vote count 
		parties.sort((a, b) => b.votes - a.votes);
		const top3Parties = parties.slice(0, 3);
		const lineChartData = [['Party', 'Votes']];
		top3Parties.forEach(party => {
			lineChartData.push([party.name, party.votes]);
		});

		// Fetch vote counts per province for the bar chart
		const voteSnapshot = await getDocs(collection(db, 'votes'));
		let provinces = {};
		voteSnapshot.forEach(doc => {
			const voteData = doc.data();
			const province = voteData.Province;
			if (provinces[province]) {
				provinces[province]++;
			} else {
				provinces[province] = 1;
			}
		});

		// (Votes per Province)
		const provinceData = [['Province', 'Number of Voters']];
		for (let province in provinces) {
			provinceData.push([province, provinces[province]]);
		}

		google.charts.load('current', { packages: ['corechart', 'bar'] });
		google.charts.setOnLoadCallback(() => {
			// Bar Chart
			const barData = google.visualization.arrayToDataTable(provinceData);
			const barOptions = {
				title: 'Voters per Province',
				chartArea: { width: '50%' },
				hAxis: {
					title: 'Number of Voters',
					minValue: 0,
					textStyle: {
						fontSize: 16  
					}
				},
				vAxis: {
					title: 'Province',
					textStyle: {
						fontSize: 16  
					}
				},
				titleTextStyle: {
					fontSize: 20,  
					bold: true
				}
			};
			const barChart = new google.visualization.BarChart(document.getElementById('barchart'));
			barChart.draw(barData, barOptions);

			// Line Chart 
			const lineData = google.visualization.arrayToDataTable(lineChartData);
			const lineOptions = {
				title: 'Top 3 Parties and Projected Winner',
				curveType: 'function',
				legend: { position: 'bottom' },
				pointSize: 5,
				titleTextStyle: {
					fontSize: 20,
					bold: true
				}
			};
			const lineChart = new google.visualization.LineChart(document.getElementById('linechart'));
			lineChart.draw(lineData, lineOptions);
		});
	}

	displayCharts();

	// Code for countdown
	async function initCountdown() {
		const electionsRef = collection(db, "elections"); 
		const now = new Date();

		try {
			// Query Firestore for elections where EndDate is greater than now
			const q = query(electionsRef, where("EndDate", ">", now));
			const querySnapshot = await getDocs(q);

			// Filter results for elections where StartDate is less than or equal to now
			const ongoingElection = querySnapshot.docs
				.map((doc) => doc.data())
				.find((election) => election.StartDate.toDate() <= now);

			if (ongoingElection) {

				const countDownDate = new Date(ongoingElection.EndDate.toDate()).getTime();
				document.getElementById("wlcMsg").innerText = ongoingElection.ElectionName;

				const x = setInterval(function () {
					const currentTime = new Date().getTime();
					const distance = countDownDate - currentTime;

					// Calculate 
					const days = Math.floor(distance / (1000 * 60 * 60 * 24));
					const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
					const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
					const seconds = Math.floor((distance % (1000 * 60)) / 1000);

					document.getElementById("demo").innerHTML = `${days}d ${hours}h ${minutes}m ${seconds}s`;

					if (distance < 0) {
						clearInterval(x);
						document.getElementById("demo").innerHTML = "END OF ELECTIONS";
					}
				}, 1000);
			} else {
				// No ongoing election
				document.getElementById("demo").innerHTML = "No Ongoing Elections";
			}
		} catch (error) {
			console.error("Error fetching elections: ", error);
			document.getElementById("demo").innerHTML = "Error loading countdown.";
		}
	}
	initCountdown();
	// Code for countdown END

	// Code for social media message message
	const textElement = document.getElementById("typing-text");
	const texts = ["What is social media saying ?", "#GeneralElections2024", "#YourVoteYourPower"];
	let index = 0;
	let charIndex = 0;
	let isDeleting = false;

	function typeEffect() {
		const currentText = texts[index];

		if (isDeleting) {
			charIndex--;
		} else {
			charIndex++;
		}

		textElement.textContent = currentText.slice(0, charIndex);

		if (!isDeleting && charIndex === currentText.length) {
			isDeleting = true;
			setTimeout(typeEffect, 1000);
		} else if (isDeleting && charIndex === 0) {
			isDeleting = false;
			index = (index + 1) % texts.length;
			setTimeout(typeEffect, 500);
		} else {
			setTimeout(typeEffect, isDeleting ? 100 : 150);
		}
	}
	typeEffect();

	// End of code for message

	// Code for Slides
	let slideIndex2 = 1;
	showSlides2(slideIndex2);

	function plusSlides2(n) {
		showSlides2(slideIndex2 += n);
	}

	function currentSlide2(n) {
		showSlides2(slideIndex2 = n);
	}

	function showSlides2(n) {
		let slides = document.getElementsByClassName("mySlides2");
		let dots = document.getElementsByClassName("dot2");
		if (n > slides.length) { slideIndex2 = 1 }
		if (n < 1) { slideIndex2 = slides.length }
		for (let i = 0; i < slides.length; i++) {
			slides[i].style.display = "none";
		}
		for (let i = 0; i < dots.length; i++) {
			dots[i].className = dots[i].className.replace(" active2", "");
		}
		slides[slideIndex2 - 1].style.display = "block";
		dots[slideIndex2 - 1].className += " active2";
	}

	setInterval(() => plusSlides2(1), 5000);
	// End of SLides code
</script>

