@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Add Election";
}

@model E_Voting_Application.Models.Election
<style>
    #footer {
        display: none;
    }
</style>
<div class="left-header1">
    <h1>Create upcoming Election</h1>
</div>

<div class="form-container3">
    <!-- checks before starting an election -->
    <div class="checklist-container">
        <p><strong style="color:red;">Pre-Election Checklist</strong></p>
        <ul>
            <li>All parties are added to the database.</li>
            <li>Candidate information (names, party affiliations, and jurisdiction levels) are accurate.</li>
            <li>Voter registration is closed, and all eligible voters are registered.</li>
        </ul>
    </div>

    <div class="container4">
        <div class="form_areaa">
            <p class="titlee">Start an Election</p>
            <div id="myProgress">
                <div id="myBar"></div>
            </div>
            <form id="createElection" asp-action="createElectionForm" asp-controller="ElectionManagement" method="post">

                <div class="formm_group">
                    <label class="subb_title" for="ElectionName">Election Name</label>
                    <input placeholder="Enter election name" asp-for="ElectionName" id="ElectionName" class="formm_style" type="text" />
                    <span asp-validation-for="ElectionName"></span>
                </div>

                <div class="formm_group">
                    <label class="subb_title" for="StartDate">Start Date & Time</label>
                    <input asp-for="StartDate" id="StartDate" class="formm_style" type="datetime-local" />
                    <span asp-validation-for="StartDate"></span>
                </div>

                <div class="formm_group">
                    <label class="subb_title" for="EndDate">End Date & Time</label>
                    <input asp-for="EndDate" id="EndDate" class="formm_style" type="datetime-local" />
                    <span asp-validation-for="EndDate"></span>
                </div>
                <div class="formm_group">
                    <button class="btnn" type="submit">Start Election</button>
                </div>
            </form>
        </div>
    </div>

    <div class="party-list-container">
        <p><strong style="color:green;">Current Registered Parties:</strong></p>
        <ul id="partyList">
            <!-- Parties -->
        </ul>
    </div>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js";
    import { getFirestore, collection, getDocs, addDoc} from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js";
    import { getStorage, ref, getDownloadURL } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-storage.js";

    // Firebase Configuration
    const firebaseConfig = {
        apiKey: "AIzaSyC01tpLg7LvB7yfTHtkB2-jfb9z-_2dA20",
        authDomain: "e-voting-application-b782e.firebaseapp.com",
        databaseURL: "https://e-voting-application-b782e-default-rtdb.firebaseio.com",
        projectId: "e-voting-application-b782e",
        storageBucket: "e-voting-application-b782e.firebasestorage.app",
        messagingSenderId: "942000114372",
        appId: "1:942000114372:web:0c5ab2571efada94515791",
        measurementId: "G-YHRLF496SD"
    };
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const storage = getStorage(app);

    // Display current registered parties
    async function fetchParties() {
        const partyList = document.getElementById('partyList');
        partyList.innerHTML = '';

        const partiesSnapshot = await getDocs(collection(db, 'parties'));
        partiesSnapshot.forEach(async (doc) => {
            console.log("Party data:", doc.data());

            const partyData = doc.data();

            const imageUrl = partyData.PartyImageUrl;
            console.log("Image URL from Firestore:", imageUrl); 

            const partyItem = document.createElement('li');
            const partyImage = document.createElement('img');

            if (imageUrl) {
                const storageRef = ref(storage, imageUrl); /
                try {
                    const downloadUrl = await getDownloadURL(storageRef);
                    console.log("Download URL:", downloadUrl); 
                    partyImage.src = downloadUrl; 
                } catch (error) {
                    console.error("Error fetching image URL:", error);
                    partyImage.src = '/Images/user_icon.png';
                }
            } else {
                // Default image if no image URL exists
                partyImage.src = '/Images/user_icon.png';
            }

            partyImage.alt = `${partyData.PartyName} logo`; 
            partyImage.classList.add('party-image'); 

            // Create party name and leader
            const partyName = document.createElement('span');
            partyName.classList.add('party-name');
            partyName.textContent = partyData.PartyName;

            const leaderName = document.createElement('span');
            leaderName.classList.add('leader-name');
            leaderName.textContent = ` - ${partyData.PartyLeader}`;

            // Append the image and text to the party item
            partyItem.appendChild(partyImage);
            partyItem.appendChild(partyName);
            partyItem.appendChild(leaderName);

            // Append the party item to the list
            partyList.appendChild(partyItem);
        });
    }

    // Call the function to fetch the parties
    fetchParties();

    // Progress bar
    function updateProgressBar() {
        const progressBar = document.getElementById("myBar");
        const fields = ["ElectionName", "StartDate", "EndDate"];
        let filledFields = 0;

        fields.forEach(fieldId => {
            const field = document.getElementById(fieldId);
            if (field && field.value) filledFields++;
        });

        const progress = (filledFields / fields.length) * 100;
        progressBar.style.width = progress + "%";
    }

    document.getElementById("ElectionName").addEventListener("input", updateProgressBar);
    document.getElementById("StartDate").addEventListener("input", updateProgressBar);
    document.getElementById("EndDate").addEventListener("input", updateProgressBar);

    // Event listener for form submission
    document.getElementById("createElection").addEventListener("submit", async function (event) {
        event.preventDefault();

        const electionName = document.getElementById("ElectionName").value;
        const startDate = document.getElementById("StartDate").value;
        const endDate = document.getElementById("EndDate").value;

        // Validation
        if (!electionName || !startDate || !endDate) {
            alert("Please fill in all fields.");
            return;
        }

        try {
            // Fetch ids
            const partiesSnapshot = await getDocs(collection(db, "parties"));
            const partyIds = [];

            partiesSnapshot.forEach((doc) => {

                partyIds.push(doc.id);  
            });

            if (partyIds.length === 0) {
                alert("No parties found in the database.");
                return;
            }

            const electionData = {
                ElectionName: electionName,
                StartDate: new Date(startDate),
                EndDate: new Date(endDate),
                PartyIds: partyIds 
            };

            // Election > Firestore
            const electionRef = collection(db, "elections");
            await addDoc(electionRef, electionData);

            alert("Election created successfully!");
            document.getElementById("myBar").style.width = "0%";
            document.getElementById("createElection").reset();
            updateProgressBar();
        } catch (error) {
            console.error("Error creating election:", error);
            alert("Error creating election: " + error.message);
        }
    });
</script>
