@{
    ViewData["Title"] = "Create Party";
}

@model E_Voting_Application.Models.Party

<div class="left-header1">
    <h1>Add a Political Party</h1>
</div>

<div class="form-container3">
    <!-- Img previews -->
    <div class="preview-container">
        <p><strong>Party Image Preview</strong></p>
        <div id="partyLogoPreview" style="max-width: 200px; max-height: 200px; margin-bottom: 10px;">
            <p> Logo Preview</p>
        </div>
        <div id="partyLeaderImagePreview" style="max-width: 200px; max-height: 200px;">
            <p>Leader Preview</p>
        </div>
    </div>

    <!-- form -->
    <div class="container4">
        <div class="form_areaa">
            <p class="titlee">Add a Political Party</p>
            <div id="myProgress">
                <div id="myBar"></div>
            </div>
            <form id="registerParty" asp-action="RegisterPartyForm" asp-controller="ElectionManagement" method="post">
                <div class="formm_group">
                    <label class="subb_title" for="PartyName">Party Name</label>
                    <input placeholder="Enter party name" asp-for="PartyName" id="PartyName" class="formm_style" type="text" />
                    <span asp-validation-for="PartyName"></span>
                </div>

                <div class="formm_group">
                    <label class="subb_title" for="PartyLeader">Party Leader</label>
                    <input placeholder="Enter leader's name" asp-for="PartyLeader" id="PartyLeader" class="formm_style" type="text" />
                    <span asp-validation-for="PartyLeader"></span>
                </div>

                <div class="formm_group">
                    <label class="subb_title" for="JurisdictionLevel">Jurisdiction Level</label>
                    <select asp-for="JurisdictionLevel" id="JurisdictionLevel" class="formm_style">
                        <option value="" disabled selected>Select an option</option>
                        <option value="National">National</option>
                        <option value="Provincial">Provincial</option>
                        <option value="Both">Both</option>
                    </select>
                    <span asp-validation-for="JurisdictionLevel"></span>
                </div>

                <div class="formm_group">
                    <label class="subb_title" for="partyLogo">Party Logo</label>
                    <input type="file" accept="image/jpg, image/jpeg, image/png" asp-for="PartyImageUrl" id="PartyImageUrl" class="formm_style" />
                    <span asp-validation-for="PartyImageUrl"></span>
                </div>

                <div class="form_group">
                    <label class="subb_title" for="partyLeaderImage">Party Leader Picture</label>
                    <input type="file" accept="image/jpg, image/jpeg, image/png" asp-for="LeaderImageUrl" id="LeaderImageUrl" class="formm_style" />
                    <span asp-validation-for="LeaderImageUrl"></span>
                </div>

                <div class="formm_group">
                    <button class="btnn" type="submit">Register Party</button>
                </div>
            </form>
        </div>
    </div>
</div>
  
<div class="left-header2">
    <h2>Delete a Political Party</h2>
    <div class="party-list-container">
        <ul id="partyList">
            <!-- Parties -->
        </ul>
    </div>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-app.js";
    import { getFirestore, collection, addDoc } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-storage.js";
    import { deleteDoc, doc, getDocs, query, where } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-firestore.js";
    import { deleteObject } from "https://www.gstatic.com/firebasejs/11.0.1/firebase-storage.js";

    // Firebase config
    const firebaseConfig = {
        apiKey: "AIzaSyC01tpLg7LvB7yfTHtkB2-jfb9z-_2dA20",
        authDomain: "e-voting-application-b782e.firebaseapp.com",
        databaseURL: "https://e-voting-application-b782e-default-rtdb.firebaseio.com",
        projectId: "e-voting-application-b782e",
        storageBucket: "e-voting-application-b782e.firebasestorage.app",
        messagingSenderId: "942000114372",
        appId: "1:942000114372:web:0c5ab2571efada94515791",
        measurementId: "G-YHRLF496SD"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const storage = getStorage(app);

    // Progres Bar update
    function move() {
        var elem = document.getElementById("myBar");
        var formFields = [
            document.getElementById("PartyName"),
            document.getElementById("PartyLeader"),
            document.getElementById("JurisdictionLevel"),
            document.getElementById("PartyImageUrl"),
            document.getElementById("LeaderImageUrl")
        ];

        var filledFields = formFields.filter(field => {
            if (field.type === "file") {
                return field.files.length > 0;
            }
            return field.value.trim() !== ""; 
        });

        var progress = (filledFields.length / formFields.length) * 100;
        elem.style.width = progress + "%";
    }

    document.getElementById("PartyName").addEventListener("input", move);
    document.getElementById("PartyLeader").addEventListener("input", move);
    document.getElementById("JurisdictionLevel").addEventListener("change", move);
    document.getElementById("PartyImageUrl").addEventListener("change", move);
    document.getElementById("LeaderImageUrl").addEventListener("change", move);


    // Preview the selected images before form submission
    document.getElementById('PartyImageUrl').addEventListener('change', function (event) {
        const file = event.target.files[0];
        const previewContainer = document.getElementById('partyLogoPreview');

        if (file) {
            const reader = new FileReader();

            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Party Logo Preview";
                previewContainer.innerHTML = ""; 
                previewContainer.appendChild(img);
            };

            reader.readAsDataURL(file);
        }
    });

    document.getElementById('LeaderImageUrl').addEventListener('change', function (event) {
        const file = event.target.files[0];
        const previewContainer = document.getElementById('partyLeaderImagePreview');

        if (file) {
            const reader = new FileReader();

            reader.onload = function (e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.alt = "Party Leader Image Preview";
                previewContainer.innerHTML = ""; 
                previewContainer.appendChild(img);
            };

            reader.readAsDataURL(file);
        }
    });

    document.getElementById('registerParty').addEventListener('submit', async function (event) {
        event.preventDefault();

    const partyName = document.getElementById('PartyName').value;
    const partyLeader = document.getElementById('PartyLeader').value;
    const jurisdictionLevel = document.getElementById('JurisdictionLevel').value;
    const partyLogo = document.getElementById('PartyImageUrl').files[0];
    const partyLeaderImage = document.getElementById('LeaderImageUrl').files[0];

        console.log("Got Values...");

        if (!partyLogo || !partyLeaderImage || !partyName || !partyLeader || !jurisdictionLevel) {
            alert("Please Enter all details");
            return;
        }

        // Validate Images
        const allowedTypes = ['image/jpeg', 'image/png', 'image/jpg'];
        if (!allowedTypes.includes(partyLogo.type) || !allowedTypes.includes(partyLeaderImage.type)) {
            alert("Invalid file type. Please upload jpg, jpeg, or png images.");
            return;
        }

        try {
            console.log("Trying to save values...");
            // Pictures > Firebase Storage
            const partyLogoRef = ref(storage, 'party-logos/' + partyLogo.name);
            const leaderImageRef = ref(storage, 'leader-images/' + partyLeaderImage.name);

            const partyLogoSnapshot = await uploadBytes(partyLogoRef, partyLogo);
            const leaderImageSnapshot = await uploadBytes(leaderImageRef, partyLeaderImage);

            // Get download URLs 
            const partyLogoUrl = await getDownloadURL(partyLogoSnapshot.ref);
            const leaderImageUrl = await getDownloadURL(leaderImageSnapshot.ref);

            // Party > Firestore
            const partyRef = collection(db, 'parties');
            await addDoc(partyRef, {
                PartyName: partyName,
                PartyLeader: partyLeader,
                JurisdictionLevel: jurisdictionLevel,
                VoteCount: 0, // Set initial vote count to 0 for any party created.
                PartyImageUrl: partyLogoUrl,
                LeaderImageUrl: leaderImageUrl
            });


            alert("Party registered successfully!");

            // Reset form 
            document.getElementById("myBar").style.width = "0%";
            document.getElementById('registerParty').reset();
            document.getElementById('partyLogoPreview').innerHTML = "<p>Logo Preview</p>";
            document.getElementById('partyLeaderImagePreview').innerHTML = "<p>Leader Preview</p>";

        } catch (error) {
            console.error("Error registering party:", error);
            alert("Error registering party: " + error.message);
        }
    });

    // Fetch parties from Firestore
    async function fetchParties() {
        const partyList = document.getElementById('partyList');
        partyList.innerHTML = ''; 

        const partiesSnapshot = await getDocs(collection(db, 'parties'));
        partiesSnapshot.forEach((doc) => {
            const partyData = doc.data();
            const partyItem = document.createElement('li');
            partyItem.innerHTML = `
                <span class="party-name">${partyData.PartyName}</span> -
                <span class="leader-name">${partyData.PartyLeader}</span>
                <img src="/Images/delete_icon.png" class="delete-icon" data-id="${doc.id}" data-logo-url="${partyData.PartyImageUrl}" data-leader-url="${partyData.LeaderImageUrl}" alt="Delete icon">
            `;
            partyList.appendChild(partyItem);
        });
    }

    // Delete party and images from Firestore and Firebase Storage
    async function deleteParty(docId, logoUrl, leaderUrl) {
        try {
            // Delete images from Storage
            const logoRef = ref(storage, logoUrl);
            const leaderRef = ref(storage, leaderUrl);
            await deleteObject(logoRef);
            await deleteObject(leaderRef);

            // Delete party from Firestore
            await deleteDoc(doc(db, 'parties', docId));
            alert('Party deleted successfully!');
            fetchParties(); 
        } catch (error) {
            console.error('Error deleting party:', error);
            alert('Error deleting party: ' + error.message);
        }
    }

    document.getElementById('partyList').addEventListener('click', function (event) {
        if (event.target.classList.contains('delete-icon')) {
            const docId = event.target.getAttribute('data-id');
            const logoUrl = event.target.getAttribute('data-logo-url');
            const leaderUrl = event.target.getAttribute('data-leader-url');

            if (confirm('Are you sure you want to delete this party?')) {
                deleteParty(docId, logoUrl, leaderUrl);
            }
        }
    });

    // Fetch the parties when the page loads
    fetchParties();
</script>